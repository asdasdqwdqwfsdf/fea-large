#!python

from sys import argv,exit
from base import Point
from base import isempty,skipwhitespaces,iscomment,removeempty
from base import removecomments,read_and_clear_lines,unique,parse_filename


# function for retriving 10-noded tetraedras from .1.ele, .1.node and .1.face
# files, generated by tetgen, and export this data to matlab structures
class tetgen_importer:
	def __init__(self,displ = 0.05):
		self.nodes = []
		self.elements = []
		self.presc = []
		self.fixed = []
		self.displ = displ
		self.filename = ""
		self.min = Point()
		self.max = Point()

	def read_nodes(self,nodename):
		self.nodes = []
		lines = read_and_clear_lines(nodename)
		# First line: <# of points> <dimension (must be 3)> <# of attributes> 
		# <# of boundary markers (0 or 1)>   
		firstline_values = [int(i) for i in lines[0].split()]
		# print firstline_values
		nodes_number = firstline_values[0]
		dof_number = firstline_values[1]
		# next lines:      
		# <point #> <x> <y> <z> [attributes] [boundary marker]
		for line_index in range(1,nodes_number+1):
			line_values = [float(i) for i in lines[line_index].split()]
			self.nodes.append(Point(line_values[1],line_values[2],line_values[3]))

	def read_elements(self,elename):
		lines = read_and_clear_lines(elename)
		# First line: <# of tetrahedra> <nodes per tetrahedron> <# of attributes>
		firstline_values = [int(i) for i in lines[0].split()]
		ele_number = firstline_values[0]
		ele_nodes = firstline_values[1]
		# <tetrahedron #> <node> <node> <node> <node> ... [attributes]
		for line_index in range(1,ele_number+1):
			line_values = [int(i) for i in lines[line_index].split()]
			element = []
			for i in range(1,ele_nodes+1):
				element.append(line_values[i])
			self.elements.append(element)

	def read_boundaries(self,facename):
		lines = read_and_clear_lines(facename)
		# first from faces list is not needed to us
		lines = lines[1:]
		# <face #> <node> <node> <node> [boundary marker]
		# here we will assume what boundary marker '-1' means fixed conditions
		# and boundary marker '1' means self.displ in direction 'y'
		# therefore we will have 2 temporary arrays: fixed and prescribed
		self.fixed = []
		self.presc = []
		# extract node indexes from faces and 'fixed' and 'presc' arrays
		for line in lines:
			values = [int(i) for i in line.split()]
			if values[-1] == -1: # fixed
				for i in range(1,len(values)-1):
					self.fixed.append(values[i])
			elif values[-1] == 1: # prescribed
				for i in range(1,len(values)-1):
					self.presc.append(values[i])
    # sort arrays to keep only unique values 
		self.fixed = unique(self.fixed)
		self.presc = unique(self.presc)
	def generate_boundaries(self):
		self.fixed = []
		self.presc = []
		for i in range(len(self.nodes)):
			if self.nodes[i].y == self.min.y:
				self.fixed.append(i+1)
			if self.nodes[i].y == self.max.y:
				self.presc.append(i+1)

	def import_file(self,filename):
		self.filename = parse_filename(filename)
		# generate filenames:
		nodename = self.filename + ".1.node"
		elename = self.filename + ".1.ele"
		# facename = self.filename + ".1.face" 
		self.read_nodes(nodename)  
		self.read_elements(elename)    
		# self.read_boundaries(facename)    
		self.find_minmax_nodes()
		self.generate_boundaries()

	def find_minmax_nodes(self):
		if len(self.nodes) == 0: 
			return
		self.min.x = self.nodes[0].x
		self.min.y = self.nodes[0].y
		self.max.x = self.nodes[0].x
		self.max.y = self.nodes[0].y
		for p in self.nodes:
			if p.x > self.max.x:
				self.max.x = p.x
			if p.y > self.max.y:
				self.max.y = p.y
			if p.x < self.min.x:
				self.min.x = p.x
			if p.y < self.min.y:
				self.min.y = p.y

	def export_matlab(self):
		if self.filename == "":
			return
		mfilename = self.filename + ".m"
		file = open(mfilename,"w+")
		# write header
		line = "function [nodes,elements,boundary]=" + self.filename + "\n"
		# line = line + "_geometry\n"
		file.write(line)
		# write nodes array
		file.write("nodes = [\n")
		for node in self.nodes:
			line = "%f,%f,%f;\n" % (node.x,node.y,node.z)
			file.write(line)
		file.write("];\n")
		# write elements array
		file.write("elements = [\n")
		for elem in self.elements:
			line = ""
			for i in range(len(elem)-1):
				line = line + "%d," % elem[i]
			line = line + "%d;\n" % elem[len(elem)-1]
			file.write(line)
		file.write("];\n")
		# write boundary array
		file.write("boundary = [\n")
		for fixed in self.fixed:
			line = "%d,0,0,0,7;\n" % fixed
			file.write(line)
		for presc in self.presc:
			line = "%d,0,%f,0,7;\n" % ( presc, self.displ )
			file.write(line)
		file.write("];\n")  
		file.close()


##
## Main program
##

if len(argv) > 1:
  filename = argv[1]
  displ = 0.05
  if len(argv) > 2:
    displ = float(argv[2])
    print displ
  importer = tetgen_importer(displ) 
  importer.import_file(filename)
  importer.export_matlab()

